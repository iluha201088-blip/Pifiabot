from flask import Flask, request, jsonify
from binance import Client
import telebot
import threading

# === –ù–ê–°–¢–†–û–ô–ö–ò (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∏–∂–µ) ===
API_KEY = ""V6iumjWj1jYafSD7H8p6eDt8jeur7mpxi5kmsOj7ptkMtsuvr1g0hjvqr2i9gxKJ","
API_SECRET = "ITt48AGOXSDMFsyrXYoT0jdnMcosW7oOBBa6pLDjgw3mIkUqM8RN3K24AiQZs88C",
TELEGRAM_TOKEN = "7753186609:AAEuJvOGtTR5yP6kXyaLJjvbKnYgRmebejc"
CHAT_ID = 5203579568
LEVERAGE = 5
SYMBOL = "BTCUSDT"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
client = Client(API_KEY, API_SECRET)
bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
client.futures_change_leverage(symbol=SYMBOL, leverage=LEVERAGE)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram(message):
    try:
        bot.send_message(CHAT_ID, message)
    except Exception as e:
        print(f"Telegram error: {e}")

# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "‚úÖ Pifia Trader Bot –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def send_startup():
    try:
        bot.send_message(CHAT_ID, "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç TradingView")
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHAT_ID.")

# –í–µ–±—Ö—É–∫ –æ—Ç TradingView
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json
    side = data.get('side', '').upper()
    symbol = data.get('symbol', '').upper()

    if symbol != SYMBOL:
        return jsonify({"error": "Wrong symbol"}), 400

    try:
        if side == "BUY":
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
            account = client.futures_account()
            usdt_balance = 0
            for asset in account['assets']:
                if asset['asset'] == 'USDT':
                    usdt_balance = float(asset['availableBalance'])
                    break

            if usdt_balance < 1:
                msg = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"
                send_telegram(msg)
                return jsonify({"error": msg}), 400

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—ë–º
            price = float(client.futures_symbol_ticker(symbol=SYMBOL)['price'])
            qty = (usdt_balance * LEVERAGE) / price
            qty = round(qty, 3)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
            client.futures_create_order(
                symbol=SYMBOL,
                side="BUY",
                type="MARKET",
                quantity=qty
            )

            msg = f"üü¢ LONG –æ—Ç–∫—Ä—ã—Ç\n–°–∏–º–≤–æ–ª: {SYMBOL}\n–û–±—ä—ë–º: {qty} BTC\n–¶–µ–Ω–∞: {price:.2f}\n–ë–∞–ª–∞–Ω—Å: {usdt_balance:.2f} USDT"
            send_telegram(msg)

        elif side == "SELL":
            positions = client.futures_position_information(symbol=SYMBOL)
            pos = [p for p in positions if p['positionSide'] == 'LONG'][0]
            qty = abs(float(pos['positionAmt']))

            if qty == 0:
                msg = "üü° –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è"
                send_telegram(msg)
                return jsonify({"status": msg})

            price = float(client.futures_symbol_ticker(symbol=SYMBOL)['price'])

            client.futures_create_order(
                symbol=SYMBOL,
                side="SELL",
                type="MARKET",
                quantity=qty
            )

            msg = f"üî¥ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞\n–°–∏–º–≤–æ–ª: {SYMBOL}\n–û–±—ä—ë–º: {qty} BTC\n–¶–µ–Ω–∞: {price:.2f}"
            send_telegram(msg)

        else:
            return jsonify({"error": "Invalid side"}), 400

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        send_telegram(error_msg)
        return jsonify({"error": str(e)}), 500

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host='0.0.0.0', port=5000)

if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    send_startup()
    bot.infinity_polling()