# bot.py
# –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: BUY ‚Üí LONG, CLOSE ‚Üí –∑–∞–∫—Ä—ã—Ç—å
# –õ–æ–≥–∏: bot.log

import logging
import sys

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ) ===
log_formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s')
log_file = "bot.log"

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)

# –õ–æ–≥ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler(log_file, mode='a', encoding='utf-8')
file_handler.setFormatter(log_formatter)
logging.basicConfig(level=logging.INFO, handlers=[file_handler])

# –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(log_formatter)
logging.getLogger().addHandler(console_handler)

logger = logging.getLogger(__name__)
logger.info("=" * 60)
logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# === üîê –¢–í–û–ò –î–ê–ù–ù–´–ï ===
TELEGRAM_TOKEN = "8067433865:AAEEew7ehXxoFKG3ref_suf1vjfd4lRnvQo"
AUTHORIZED_CHAT_ID = 5203579568  # –¢–æ–ª—å–∫–æ —Ç—ã

BINANCE_API_KEY = "V6iumjWj1jYafSD7H8p6eDt8jeur7mpxi5kmsOj7ptkMtsuvr1g0hjvqr2i9gxKJ"
BINANCE_API_SECRET = "ITt48AGOXSDMFsyrXYoT0jdnMcosW7oOBBa6pLDjgw3mIkUqM8RN3K24AiQZs88C"

# === üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–¥–µ–ª–∫–∏ ===
SYMBOL = "BTCUSDT"
LEVERAGE = 5
RISK_PERCENT = 95  # 95% –æ—Ç –±–∞–ª–∞–Ω—Å–∞

# === üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance ===
try:
    from binance import Client
    client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Binance API")
except Exception as e:
    logger.critical(f"‚ùå –û—à–∏–±–∫–∞ Binance: {e}")
    print("‚ùå –û—à–∏–±–∫–∞ Binance. –°–º–æ—Ç—Ä–∏ bot.log")
    sys.exit(1)

# === üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram ===
try:
    from telegram import Update
    from telegram.ext import Updater, MessageHandler, Filters, CallbackContext
    logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥—É–ª–∏ Telegram")
except Exception as e:
    logger.critical(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
    print("‚ùå –û—à–∏–±–∫–∞ Telegram. –°–º–æ—Ç—Ä–∏ bot.log")
    sys.exit(1)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def handle_message(update: Update, context: CallbackContext):
    try:
        chat_id = update.effective_chat.id
        text = update.message.text.strip().upper()
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ: '{text}' –æ—Ç chat_id={chat_id}")

        if chat_id != AUTHORIZED_CHAT_ID:
            logger.warning(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: {chat_id}")
            update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return

        if text == "BUY":
            open_long(update)
        elif text == "CLOSE":
            close_position(update)
        else:
            update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: BUY –∏–ª–∏ CLOSE")
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {text}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞: {e}")

# === –û—Ç–∫—Ä—ã—Ç–∏–µ LONG ===
def open_long(update: Update):
    try:
        update.message.reply_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é: BUY BTCUSDT (LONG)")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        client.futures_change_leverage(symbol=SYMBOL, leverage=LEVERAGE)
        logger.info(f"‚öôÔ∏è –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: x{LEVERAGE}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        try:
            account = client.futures_account()
        except Exception as e:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ Binance")
            logger.error(f"‚ùå futures_account() –æ—à–∏–±–∫–∞: {e}")
            return

        # –ò—â–µ–º USDT –∏ –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å (—É—á–∏—Ç—ã–≤–∞–µ–º walletBalance)
        usdt_balance = 0.0
        for asset in account['assets']:
            if asset['asset'] == 'USDT':
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ 'balance', –ø–æ—Ç–æ–º 'walletBalance'
                bal = asset.get('balance')
                w_bal = asset.get('walletBalance')
                try:
                    if bal not in (None, ''): usdt_balance = float(bal)
                    elif w_bal not in (None, ''): usdt_balance = float(w_bal)
                except (TypeError, ValueError):
                    pass
                break

        if usdt_balance <= 0:
            update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
            logger.warning("üìâ –ë–∞–ª–∞–Ω—Å USDT <= 0")
            return

        amount_to_risk = usdt_balance * (RISK_PERCENT / 100)
        logger.info(f"üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º: {amount_to_risk:.2f} USDT –∏–∑ {usdt_balance:.2f}")

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        try:
            ticker = client.futures_symbol_ticker(symbol=SYMBOL)
            price = float(ticker['price'])
        except Exception as e:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã BTCUSDT")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—ã: {e}")
            return

        logger.info(f"üìà –¶–µ–Ω–∞: {price:.2f}")

        # –†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        qty = (amount_to_risk * LEVERAGE) / price

        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        try:
            info = client.futures_exchange_info()
            step_size = 0.001
            for s in info['symbols']:
                if s['symbol'] == SYMBOL:
                    for f in s['filters']:
                        if f['filterType'] == 'LOT_SIZE':
                            step_size = float(f['stepSize'])
                            break
            qty = round((qty // step_size) * step_size, 6)
        except Exception as e:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –æ–±—ä—ë–º–∞")
            logger.error(f"‚ùå LOT_SIZE –æ—à–∏–±–∫–∞: {e}")
            return

        if qty <= 0:
            update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            logger.warning("üìâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <= 0")
            return

        # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
        try:
            client.futures_create_order(
                symbol=SYMBOL,
                side="BUY",
                type="MARKET",
                quantity=qty
            )
            update.message.reply_text(
                f"‚úÖ LONG –æ—Ç–∫—Ä—ã—Ç\n"
                f"üìä {qty} {SYMBOL}\n"
                f"üí∞ –ù–∞ —Å—É–º–º—É: ~{amount_to_risk:.2f} USDT\n"
                f"‚öôÔ∏è –ü–ª–µ—á–æ: x{LEVERAGE}\n"
                f"üìà –¶–µ–Ω–∞: {price:.2f}"
            )
            logger.info(f"‚úÖ LONG: {qty} –ø–æ {price:.2f}")
        except Exception as e:
            error = str(e)
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞: {error[:80]}")
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞: {error}")

    except Exception as e:
        error = str(e)
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ BUY: {error[:100]}")
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ BUY: {error}")

# === –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ===
def close_position(update: Update):
    try:
        update.message.reply_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é: CLOSE BTCUSDT")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        try:
            positions = client.futures_position_information(symbol=SYMBOL)
        except Exception as e:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏")
            logger.error(f"‚ùå futures_position_information –æ—à–∏–±–∫–∞: {e}")
            return

        position = None
        for p in positions:
            if float(p['positionAmt']) != 0:
                position = p
                break

        if not position:
            update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏")
            return

        qty = abs(float(position['positionAmt']))
        side = "SELL"

        try:
            client.futures_create_order(
                symbol=SYMBOL,
                side=side,
                type="MARKET",
                quantity=qty
            )
            pnl = float(position['unRealizedProfit'])
            update.message.reply_text(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞\n"
                f"CloseOperation: {side} {qty} {SYMBOL}\n"
                f"üí° PnL: {pnl:.3f} USDT"
            )
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞. PnL: {pnl:.3f}")
        except Exception as e:
            error = str(e)
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {error[:80]}")
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {error}")

    except Exception as e:
        error = str(e)
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ CLOSE: {error[:100]}")
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ CLOSE: {error}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    try:
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        updater.dispatcher.add_handler(MessageHandler(Filters.text, handle_message))
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤: BUY / CLOSE")
        print("üí° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å bot.log –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
        updater.start_polling(drop_pending_updates=True)
        updater.idle()
    except Exception as e:
        logger.critical(f"üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("‚ùå –ë–æ—Ç —É–ø–∞–ª. –°–º–æ—Ç—Ä–∏ bot.log")

if __name__ == '__main__':
    main()
